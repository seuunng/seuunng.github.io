<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="ko"><generator uri="https://jekyllrb.com/" version="3.9.5">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" hreflang="ko" /><updated>2024-05-02T23:16:40+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">스며드는 개발자</title><subtitle>삶의 작은 불편을 편리함으로 전화시키는 코딩을 꿈꿉니다.</subtitle><author><name>seuunng</name><email>mnb2856@gmail.com</email></author><entry><title type="html">깃허브 블로그 접어야하나 고민하게 한 Paginator</title><link href="http://localhost:4000/%EC%BD%94%EB%94%A9/2024/05/02/myblog-directory-update/" rel="alternate" type="text/html" title="깃허브 블로그 접어야하나 고민하게 한 Paginator" /><published>2024-05-02T13:00:00+09:00</published><updated>2024-05-02T13:00:00+09:00</updated><id>http://localhost:4000/%EC%BD%94%EB%94%A9/2024/05/02/myblog-directory-update</id><content type="html" xml:base="http://localhost:4000/%EC%BD%94%EB%94%A9/2024/05/02/myblog-directory-update/"><![CDATA[<h3 id="메뉴수정사항">메뉴수정사항</h3>
<p>──BLOG<br />
   ├─<span style="color: blue;">[추가] project *main </span><br />
   │ : 프로젝트 과정 기록 메뉴, main폴더로 변경<br />
   ├──<del>about</del> [삭제] : 프로필은 한 페이지로 작성 예정<br />
   └──blog <del>*main</del> [삭제] 매일 공부한 개념 정리 및 글쓰기 연습 폴더<br />
  <br /></p>
<blockquote>
  <p>메뉴를 프로젝트와 블로그 두개로 운영예정이다. <br />
  <strong>프로젝트</strong>는 팀프로젝트와 개인프로젝트의 진행과정을 글로 기록하는 메뉴로 현재 팀에서 진행중인  ERP시스템 제작 중 고객관리 파트를 맡아 진행중인 내용과 개인적으로 일기장 어플을 만드는 과정을 기록하고자 한다. <br />
  <strong>블로그</strong>에는 수업시간에 배운 개념에 대한 심화학습을 중심으로 독서에 관한 성찰이나 다양한 유익한 깨달음을 소재로 글을 꾸준히 써보고자 한다. 1페이지 자기소개는 메뉴에서 빼고 별도로 작성했다.</p>
</blockquote>

<p><br /></p>
<h3 id="폴더수정사항">폴더수정사항</h3>
<p>──BLOG<br />
   ├──_data : 기본설정파일 외 설정파일 모음폴더<br />
   ├──_includes : 페이지 구성 조각 모음 폴더<br />
   ├──_layouts<br />
   ├──_posts : blog에 작성한 글 모음 폴더<br />
   ├─<span style="color: blue;">[추가] logs : project에 관한 기록 글 모음 폴더</span><br />
   ├──_sass : 스타일 설정파일 모음폴더<br />
   ├──_site<br />
   ├──.sass-cache<br />
   ├──assets  <br />
   └──script<br />
   <span style="color: blue;">[추가] blog : blog목록페이지 index.html</span><br />
   <span style="color: blue;">[추가] project <br />
      ├──ERP System : 이 프로젝트의 목록페이지 index.html<br />
      └──Diary Project : 이 프로젝트의 목록페이지 index.html<br /> </span></p>

<blockquote>
  <p><strong>이부분이 자꾸 헷갈림</strong> <br />
 blog - 전체 포스트 목록 - 날짜/카테고리/태그별 포스트 목록 
            -&gt; 포스트 목록 수정 : 전체/ 카테고리별<br />
 project - 프로젝트 목록 - 프로젝트1의 로그 목록(블로그의 날짜 형식으로 변경)</p>
</blockquote>

<h3 id="파일수정사항">파일수정사항</h3>
<p>──BLOG<br />
   ├──_data<br />
   │  ├──archive.yml : <헤더>블로그 분류 메뉴(날짜/카테/태그)<br />
  &emsp;│&emsp;&emsp;├──navigation.yml : <사이드바>블로그 전체 메뉴(프젝/블로그)<br />
  &emsp;│&emsp;&emsp;├──social.yml :<사이드바>소셜(깃허브/유튜브)<br />
  &emsp;│&emsp;&emsp;└─<span style="color: blue;">[추가] project.yml : 프로젝트 목록관련 설정</span><br />
  &emsp;├──_includes<br />
  &emsp;│&emsp;&emsp;├──content.html : 본문 영역과 풋터<br />
  &emsp;│&emsp;&emsp;├──custom-head.html<br />
  &emsp;│&emsp;&emsp;├──disqus.html : 댓글*나중에 꼭 해보자<br />
  &emsp;│&emsp;&emsp;├──google-analytics.html <br />
  &emsp;│&emsp;&emsp;├──head.html<br />
  &emsp;│&emsp;&emsp;├──home-header.html : 목록 분류 메뉴(날짜/카테고리/태그)<br />
  &emsp;│&emsp;&emsp;├──mathjax.html<br />
  &emsp;│&emsp;&emsp;├──post-tags.html : 포스트 태그<br />
  &emsp;│&emsp;&emsp;├──scroll.html<br />
  &emsp;│&emsp;&emsp;├──sidebar-left.html : 왼쪽사이드바(제목/메뉴/소셜)<br />
  &emsp;│&emsp;&emsp;├──sidebar-right.html : 오른쪽사이드바(본문 목차 영역)<br />
  &emsp;│&emsp;&emsp;└──toc.html : 본문 목차<br />
  &emsp;├──_layouts<br />
  &emsp;│&emsp;&emsp;├──archive-dates.html : 본문 시간별 목록<br />
  &emsp;│&emsp;&emsp;├──archive-taxonomies.html 본문: 카테고리/태그별 목록<br />
  &emsp;│&emsp;&emsp;├──default.html <br />
  &emsp;│&emsp;&emsp;├──home.html : 블로그 목록<br />
  &emsp;│&emsp;&emsp;├──page.html<br />
  &emsp;│&emsp;&emsp;└──post.html : 본문<br />
  &emsp;├──_sass<br />
  &emsp;│&emsp;&emsp;├──_alignment.scss<br />
  &emsp;│&emsp;&emsp;├──_archive.scss<br />
  &emsp;│&emsp;&emsp;├──_base.scss<br />
  &emsp;│&emsp;&emsp;├──_code.scss<br />
  &emsp;│&emsp;&emsp;├──_home-header.scss<br />
  &emsp;│&emsp;&emsp;├──_layout.scss<br />
  &emsp;│&emsp;&emsp;├──_message.scss<br />
  &emsp;│&emsp;&emsp;├──_pagination.scss<br />
  &emsp;│&emsp;&emsp;├──_post.scss<br />
  &emsp;│&emsp;&emsp;├──_sidebar.scss<br />
  &emsp;│&emsp;&emsp;├──_syntax-dark.scss<br />
  &emsp;│&emsp;&emsp;├──_syntax-light.scss<br />
  &emsp;│&emsp;&emsp;├──_toc.scss<br />
  &emsp;│&emsp;&emsp;├──_type.scss<br />
  &emsp;│&emsp;&emsp;└──_bariables.scss<br />
  &emsp;├──_site       <br />
  &emsp;├──.sass-cache<br />
  &emsp;├──assets<br />
  &emsp;│&emsp;&emsp;└──styles.scss<br />
  &emsp;├──scripts<br />
  &emsp;├──_config.yml : 기본설정<br />
  &emsp;├──404.html<br />
  &emsp;├──about.html : 프로필 페이지<br />
  &emsp;├──avatar.jpeg : 사이드바 사진<br />
  &emsp;├──bg.jpeg : 사이드바 배경 사진<br />
  &emsp;├──categories.md : 목록 분류 메뉴 카테고리 설정<br />
  &emsp;├──dates.md : 목록 분류 메뉴 날짜 설정<br />
  &emsp;├──Gemfile<br />
  &emsp;├──Gemfile.lock<br />
  &emsp;├──index.html : 메인페이지(project 목록)<br />
  &emsp;├──LICENSE.md<br />
  &emsp;├──README.md<br />
  &emsp;└──tags.md : 목록 분류 메뉴 카테고리 설정<br />
  <br /></사이드바></사이드바></헤더></p>

<h3 id="수정계획">수정계획</h3>

<ol>
  <li><del>log랑 project메뉴 연결, log 업로드</del></li>
  <li><del>전체 프로젝트 목록 - 개별 프로젝트목록(시간별)</del></li>
  <li><del>블로그 목록 &lt;-&gt; 카테고리별 목록, 태그별 목록 삭제</del></li>
  <li>블로그 및 프로젝트 목록 레이아웃, 사진포함</li>
  <li>검색엔진 등록</li>
  <li>프로필 레이아웃 -&gt; 자기개발 계획 연동</li>
  <li>프로젝트/블로그 메뉴 반응성 수정</li>
  <li>toc반응성 수정</li>
  <li>소셜수정 카톡도 되나?</li>
  <li>댓글</li>
  <li>검색기능 가능할려나?</li>
  <li>
    <추가>본문에 태그 빼기
</추가>
  </li>
  <li>
    <추가>log에 추천글 수정하기, 이전글 다음글 다른 양식으로 넣고 싶다
</추가>
  </li>
  <li>사이드바 문구 확정</li>
</ol>

<p>일단 이렇게 <del>11개</del> 14개, 수정을 차근차근 진행해보자.</p>

<p>뭔가 굉장히 많이 수정한 것 같아서 파일명까지 기록하여 정리하자고 생각하고 시작했는데 생각보다 많이 수정 안했구나 싶다. 아마 시작부터 헛손가락질이 어마어마해서 굉장히 많은 작업을 했다고 생각했으나 실상은 제자리 걸음이었던 것으로 확인했다. 내가 그제부터 헛손가락질 한 것이 무엇인가 하면. jekyll의 paginator기능이 실행되지 않아서 수정하려고 한 일들 이었다. project메뉴를 만들고 싶어서 추가하고 기본적인 틀은 blog를 활용해야겠다 싶어서 이것저것 복사했다. 그리고 페이지가 이동되도록 각 파일들을 연결했다. 어제그제 두어개 글을 쓰고 나니 잘 나오던 blog목록이 안나오는 것이 문제의 발단이었다. 날짜, 카테고리, 태그별로 보는 목록은 잘 나오는데 전체 포스트 목록만 안나왔다. 뭐가 문제일까. 같은 설정의 파일들이 여러개 만들어진 것이 문제일까? config 파일 설정이 문제일까? 목록 코드가 내가 여기저기 복붙하면서 누락된 부분이 있는지 두 밤을 새도록 얼마나 확인을 했는지.. 그렇게 지피티 선생님과 고군분투하다가 알게된 사실, <strong>jekyll의 paginator는 index.html파일에서만 작동한다는 것</strong>이었다. 목록이 출력이 안나온 결정적인 이유는 내가 메인페이지를 블로그에서 프로젝트로 바꾸면서 <strong>블로그 목록 페이지의 이름이 변경</strong>되었기 때문이었다. 그래도 반가운 소식이 있었다. <strong>Jekyll-paginate-v2 플러그인</strong>을 설치하면 해결된다고 했다. 그 순간 느꼈다. 오, 해결됐다!!! 하지만 나의 반짝였던 기대감은 무너지고 해결되지 않았다. 각 페이지의 설정, 설정파일의 설정, 파일이름, 폴더이름을 늦은 밤까지 들여다봤지만 해결하지 못한 채 찜찜한 아침을 맞았다. 그리고 학원 가는 길, 새벽까지 블로그를 봐서 피곤하고 힘이 쭉 빠져 있었다. 비몽사몽한 중에도 어제의 문제가 떠올랐다. 그리고 핸드폰을 들어 검색했다. <strong>jekyll pagination not working</strong> 많은 사람들이 너도나도 안된다고 글을 올렸고 많은 사람들이 도움을 주고자 답변을 달아놨다. 그러다 눈에 띈 글, “index.html파일에서만 작동해요.” “오, 파일명을 변경하고 경로에 폴더명을 추가해서 해결했어요!” “아 그문제는 jekyll공식사이트에도 있어요. Jekyll-paginate-v2로 해결했습니다.” 그리고 <strong>“Jekyll-paginate-v2 은 github.io에서는 작동하지 않아요.”  하.. 나는 누구인가, 여기는 어디인가, 나는 어디로 가고 있는가, 삶이란 무엇인가.</strong> 안되는 이유가 다 있었다. 오전은 쉬고 오후에 다시 찬찬히 시도해보기로 했다. 사람들도 문제가 있고 물어보고 도와주면서 해결해가고 있었다. 나라고 못 할 이유가 없다. 다시 마음을 잡았다. github블로그에서는 쓸모없는 Jekyll-paginate-v2를 지우고 다시 차근차근 폴더명과 파일명, 경로를 확인하고 Jekyll공식홈페이지에서 안내하는 설정문구를 작성했다. <strong>어라? 되네?!</strong></p>

<p>수업시간에 선생님이 <strong>공식사이트</strong>를 계속 찾아주시면서 수업을 한 이유가 다 있었다. 내가 물어보는 즉시 바로바로 답을 내놓는 지피티가 편리해서 자꾸 묻다보니 돌고도는 답변속에서 헤어나오지 못하고 밤을 지새웠지만, <strong>안될 땐 얼른 다시 생각을 정리하고 마음을 가다듬고 다른 방법을 생각해야겠다.</strong>(아니면 잠이라도 자자.) 당연히 코드 문제일꺼라고 생각했다. 폴더명, 파일명이 문제일꺼라고는 생각도 못했다. 뭘 알아야 질문도 하지. 오늘도 하나 배웠다. 개설한지 일주일만에 심각하게 접을까 고민하게한 문제였지만, 가뿐하게ㅋㅋㅋ 잘 해결함으로써 오히려 <strong>할 수 있을 것 같다는 자신감이 불어와 나를 다시 한 번 설레이게 하는 경험이었다.</strong></p>]]></content><author><name>seuunng</name></author><category term="코딩" /><category term="깃허브블로그" /><summary type="html"><![CDATA[깃허브 블로그 디렉토리 정리 및 수정 계획, 엄청 마음고생시킨 Paginator 문제 해결 과정]]></summary></entry><entry><title type="html">익숙하지만 낯선 코드, 접근제한자와 Java키워드</title><link href="http://localhost:4000/%EC%BD%94%EB%94%A9/2024/05/01/access-modifier-JavaKeyword-copy/" rel="alternate" type="text/html" title="익숙하지만 낯선 코드, 접근제한자와 Java키워드" /><published>2024-05-01T21:00:00+09:00</published><updated>2024-05-01T21:00:00+09:00</updated><id>http://localhost:4000/%EC%BD%94%EB%94%A9/2024/05/01/access-modifier-JavaKeyword%20copy</id><content type="html" xml:base="http://localhost:4000/%EC%BD%94%EB%94%A9/2024/05/01/access-modifier-JavaKeyword-copy/"><![CDATA[<p>근로자의 날인데도 수업을 들으러 간다. 익숙한 등원 길에 마주치던 귀여운 잼민이도 엘레베이터 앞에 줄 서있는 직장인들도 없는 낯선 아침이었다. 근로자의 날인데 초등학생은 왜 쉬는걸까하는 궁금증을 뒤로 한채 공부할 기분이 안나는 무겁고 늘어지는 적막한 아침 공기를 뚫고 교실에 들어선다. 수업을 듣다보면 강사님의 코드를 따라쓰고 오타 확인하기 바빠 내가 무슨 코드를 쓰고 있는 건지 미처 생각하지 못할 때가 있다. 또 다르게는 자주봐서 매우 익숙하나 무슨 뜻인지 모르는 코드들도 있다. 오늘은 무슨 뜻 인지도 정확히 모르고 강사님이 쓰는대로 따라 썼던 <strong>익숙하지만 낯선 코드</strong>에 대해서 공부해보고자 한다.</p>

<h2 id="접근제한자">접근제한자</h2>
<p>클래스, 메서드, 필드와 같은 자바 언어 요소에 대한 <strong>접근 수준을 정의</strong>하는 데 사용되는 키워드로 이를 통해 특정 코드의 접근 가능 정도를 제어하고, 외부에서 사용 허용할 지 여부를 결정한다. 어떤 접근제한자를 붙여서 만드느냐에 따라서 접근할 수 있는 범위가 달라진다는 얘기다. 으, 접근제한자에 대해서 잘 파악하지 못하고 아무거나 따라 썼다가는 도대체 왜 안되는거야!!를 백만번 외쳐도 왜인지 못 찾는 불상사가 생기기 십상이겠다. 그러니 오늘 아주 확실히 파악해 두자.</p>

<h3 id="public">public</h3>
<p>모든 클래스에서 접근할 수 있는 <strong>가장 제한이 없는</strong> 접근제한자로 클래스, 메서드, 필드에 사용 가능하다. 가장 자주 보인것 같다. 공공의 이런 뜻일까? 다행히 별 제한 없이 다 사용할 수 있게 허용한다. 같은 패키지가 아니라도, 상속관계가 아니라도 접근을 허용하는 시골집 마당에서 키우는 귀여운 발바리 강아지 같은 접근제한자였다. 보안이 필요한 경우에는 주의할 필요가 있겠다. 기억하자.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>// Public 클래스
<span class="k">**</span>public<span class="k">**</span> class PublicClass <span class="o">{</span>
    // Public 생성자
    <span class="k">**</span>public<span class="k">**</span> PublicClass<span class="o">()</span> <span class="o">{}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="protected">protected</h3>
<p>상속받은 <strong>하위 클래스</strong> 혹은 <strong>동일한 패키지의 클래스</strong>에서만 접근할 수 있다. 외부 패키지에서는 접근할 수 없지만 <strong>상속 관계</strong>에 있는 경우에는 접근할 수 있다. 보호하는 이라는 뜻일까? 외부의 접근은 차단하여 보호한다. 그래도 상속받은 클래스에게는 접근을 허용한다는 여지를 남긴다.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>// Protected 클래스
class ProtectedClass <span class="o">{</span>
    // <span class="k">**</span>Protected<span class="k">**</span> 생성자
    protected ProtectedClass<span class="o">()</span> <span class="o">{}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="default-패키지-프라이빗">default: 패키지 프라이빗</h3>
<p>접근 제한자를 명시하지 않을 때 <strong>기본값</strong>으로 적용되는 접근제한자로 <strong>같은 패키지 내의 클래스</strong>에서만 접근할 수 있다. 접근 수준은 protected보다 더 제한적이라고 볼 수 있다. protected는 외부라도 상속관계인 경우에는 접근을 허용하는 조건이 있지만 이 경우에는 어떠한 조건따위 없이 무조건 다른 패키지에서의 접촉은 차단하는 접근제한자다.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>// Package-private 클래스
class PackagePrivateClass <span class="o">{</span>
    // Package-private 생성자
    PackagePrivateClass<span class="o">()</span> <span class="o">{}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="private">private</h3>
<p><strong>해당 클래스 내부</strong>에서만 접근할 수 있다. 이것도 많이 봤는데 이렇게 도도한 접근제한자 였다니 다시 보인다. 가장 접근 제한이 강력한 수준으로 다른 클래스나 하위 클래스(자식클래스나 파생클래스)에서도 접근할 수 없다.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>// Private 클래스
class PrivateClass <span class="o">{</span>
    // Private 생성자
    <span class="k">**</span>private<span class="k">**</span> PrivateClass<span class="o">()</span> <span class="o">{}</span>

    // 내부에서만 접근 가능한 메서드
    public static PrivateClass getInstance<span class="o">()</span> <span class="o">{</span>
        <span class="k">return </span>new PrivateClass<span class="o">()</span><span class="p">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<blockquote>
  <p>*비교 <strong>로컬클래스</strong>: private 클래스는 외부에서 클래스에 접근하는 것을 막는 것이고, 로컬클래스는 클래스 안에 생성된 클래스를 정의하는 것으로 해당 속한 클래스나 메서드, 블록 내부에서만 사용되는 클래스를 말한다. 제한적이라는 것은 비슷하지만, 개념 자체가 달라서 비교를 할 수 가 없다..</p>
</blockquote>

<h2 id="java-키워드">Java 키워드</h2>

<h3 id="static">static</h3>
<p>static은 <strong>정적</strong> 키워드로, 해당 메서드 또는 변수가 <strong>클래스 수준</strong>에 속함을 나타낸다. 즉, 클래스의 인스턴스화 없이도 메서드를 호출 할 수 있다. 클래스 로딩 시 메모리에 할당된다. 일반적으로 클래스 수준의 유틸리티 메서드 또는 상수를 정의할 때 사용된다.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>public class Example <span class="o">{</span>
    public <span class="k">**</span>static<span class="k">**</span> int counter <span class="o">=</span> 0<span class="p">;</span> // static 필드

    public <span class="k">**</span>static<span class="k">**</span> void increment<span class="o">()</span> <span class="o">{</span> // static 메서드
        counter++<span class="p">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="final">final</h3>
<p>final 키워드는 변수, 메서드, 또는 클래스를 <strong>수정하지 못하도록</strong> 제한할 때 사용된다. 변수에서 final이 사용되면 값이 변할 수 없고, 재할당할 수 없음을 의미한다. 이는 상수와 비슷하지만 상수는 컴파일 시부터 정해져 있는 값을 의미하고 변수를 final로 정의한다는 것은 초기화한 후에 변경할 수 없다는 것을 의미한다. 클래스 변수에 final과 static을 동시에 사용하면 컴파일 시점에 상수로 동작하게 되어, 프로그램이 실행하는 동안 변경할 수 없다. final이 메서드에서 사용되면 서브클래스에서 오버라이딩할 수 없음을 의미한다. 클래스에서 사용되면 서브클래스를 만들 수 없음을 의미한다.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>public <span class="k">**</span>final<span class="k">**</span> class FinalClass <span class="o">{</span> // 상속 불가능한 클래스
    public final void display<span class="o">()</span> <span class="o">{</span> // 오버라이딩 불가능한 메서드
        System.out.println<span class="o">(</span><span class="s2">"Final Method"</span><span class="o">)</span><span class="p">;</span>
    <span class="o">}</span>
<span class="o">}</span>
public class Example <span class="o">{</span>
    public <span class="k">**</span>final<span class="k">**</span> int CONSTANT_VALUE <span class="o">=</span> 42<span class="p">;</span> // 상수
<span class="o">}</span>
</code></pre></div></div>
<blockquote>
  <ul>
    <li><strong>상수</strong>란? 상수는 프로그램에서 변경할 수 없는 값이다. 한 번 정의되면 재할당 할 수 없으며, 프로그램의 나머지 부분에서 계속해서 사용합니다. 상수는 보통 프로그램에서 의미가 명확하고 변하지 않는 값을 표현하기 위해 사용된다.</li>
  </ul>
</blockquote>

<h3 id="main">main</h3>
<p>main 메서드는 Java <strong>애플리케이션의 진입점</strong>으로, 프로그램 시작 시 호출되는 메서드다.JVM(Java Virtual Machine)이 프로그램을 실행할 때 main 메서드를 찾아 실행한다. 일반적으로 public static void main(String[] args)의 형태를 취한다. String[] 타입의 매개변수를 받아서 프로그램에 전달된 명령줄 인자를 처리할 수 있다.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>public class MainClass <span class="o">{</span>
    public static void <span class="k">**</span>main<span class="k">**</span><span class="o">(</span>String[] args<span class="o">)</span> <span class="o">{</span>
        System.out.println<span class="o">(</span><span class="s2">"Hello, World!"</span><span class="o">)</span><span class="p">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="void">void</h3>
<p>void 키워드는 메서드가 <strong>반환값을 갖지 않음</strong>을 나타낸다.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>public <span class="k">**</span>void<span class="k">**</span> printMessage<span class="o">(</span>String message<span class="o">)</span> <span class="o">{</span>
    System.out.println<span class="o">(</span>message<span class="o">)</span><span class="p">;</span>
<span class="o">}</span>
</code></pre></div></div>]]></content><author><name>Seuunng</name></author><category term="코딩" /><category term="accessModifier," /><category term="JavaKeyword" /><summary type="html"><![CDATA[근로자의 날을 맞이하여 수업시간에 본 모르는 코드 공부하기]]></summary></entry><entry><title type="html">엉망진창 깃허브 블로그 만들기 도전!</title><link href="http://localhost:4000/%EC%BD%94%EB%94%A9/2024/04/30/My-Journey-to-Create-a-GitHub-Blog/" rel="alternate" type="text/html" title="엉망진창 깃허브 블로그 만들기 도전!" /><published>2024-04-30T22:00:00+09:00</published><updated>2024-04-30T22:00:00+09:00</updated><id>http://localhost:4000/%EC%BD%94%EB%94%A9/2024/04/30/My-Journey-to-Create-a-GitHub-Blog</id><content type="html" xml:base="http://localhost:4000/%EC%BD%94%EB%94%A9/2024/04/30/My-Journey-to-Create-a-GitHub-Blog/"><![CDATA[<!--
파란글씨 <span style="color: blue;"></span>
굵은글씨 ** **
큰글씨 <span class="big-text"></span>
들여쓰기 <span class="indent-text"></span>
형광펜 <mark></mark>
제목 #~#######
인용구 >  -->

<p>코딩 공부를 시작하고 3개월차, 이제 깃허브도 배우고 프로젝트도 시작하고 뭔가 뭔가 내가 만들어낸 너무 귀엽고 사랑스러운 결과물들을 자랑하고 싶어졌다. 뭔가 배우고 성장하고 있는 지금을 기록하고 싶기도 했다. 그러다 알게된 <strong>깃허브 블로그</strong>. 개발자들은 깃허브로 블로그도 운영하고 포트폴리오로도 쓴다고. 그렇게 덜컥 해야겠다! 결심했다. 그러곤 깃허브 홈페이지에서 한참을 헤맷다. 도데체 글을 어디다 쓰는거지? 다른 사람들이 쓴글은 어떻게 볼 수 있는거지? 우여곡절 끝에 다른 사람이 만들어둔 테마를 활용해서 블로그를 만들수 있다는 것을 알게 되었다. <strong>나 코딩 3개월 차, 템플릿이 있다면 블로그 쯤 만들 수 있지, 도전!</strong> 프로젝트 커밋, 머지를 몇 번 해보긴 했지만 다른 사람의 소스를 포크해와서 쓰는 것도 처음이고, 깃허브에 레파지토리를 먼저 만들지, 컴퓨터에 폴더를 먼저 만들지 엉망진창. Jekyll, Ruby, Bundle, gem 모르는 단어들 투성이에 테마도 여러번 뒤집어 엎고. 고생끝에. <strong>블로그에 내가 찍은 사진과 내 사진과 내 이름을 썼다.</strong> 그리고 성취감을 느끼며 잠시 침대에 누워서 쉬면서 생각했다. 근데 이 블로그에 글을 쓰면 포털 사이트에서 검색이 되나? 어떻게 외부에 노출 시키지? 검색엔진 등록, SEO설정, 또 다시 험난한 길이 예상된다. 일단 블로그는 만들어 졌고, 아직 내가 원하는 레이아웃을 완성하지는 못했지만, 첫 포스트를 업로드한다. <strong>깃허브 블로그를 만들면서 처음 본 단어들</strong>, 그것들의 정체에 대해!<br /></p>

<p>내가 만들 블로그는 <a href="http://jekyllthemes.org/">jekyllthemes</a> 에서 제공하는 템플릿을 이용했다. 사실 나는 두번째로 시도한 템플릿을 포크해서 로컬 서버 연결해서 여는것 까지 성공했었는데, 그 템플릿에는 첫 페이지만 제공하고 있었다. 블로그 포스트 페이지나 포스트 목록 페이지가 없었다. 그래서 커스텀을 시도하다가 나의 능력에 대한 빠른 판단력으로 이 템플릿으로 넘어왔다. (첫번째 도전한 템플릿은 끝까지 서버연결이 제대로 되지 않았다.) 나의 최종 선택을 받은 템플릿은 포스트 페이지가 있는 것도 감사한데, “포스트를 쓸때는 이렇게 하는거야”, “카테고리 추가하고 싶으면 여기에 작성해” 라는 안내 문구 등 까지 친절하게 작성되어 있었다. (“Thank you, Matt Harzewski!” )  나에게 이런 템플릿을 제공한 <mark>Jekyll</mark> 은 무엇인가, 블로그 게시물을 쉽게 생성, 관리, 발행할 수 있는 도구와 템플릿을 제공하여 블로그 운영을 지원하는 <strong>블로그 지향적인 정적 사이트 생성기</strong>다. 동적 서버 사이드 스크립트나 <strong>데이터베이스 없이 웹사이트를 생성</strong>하는 도구! DB 연결할 필요가 없으니 가볍고 <strong>속도도 빠르다</strong>. 또한 <strong>보안 취약점 자체가 없다</strong>. 게다가 <strong>비용도 저렴</strong>하다. 나는 jekyll을 검색하면서 블로그 지향적이라는 표현을 처음 봤는데, 이는 플랫폼이나 소프트웨어가 블로그 형태의 콘텐츠 생성 및 관리를 용이하게 하는 기능이나 구조를 갖추었음을 의미라고 한다.<br /></p>

<p>이렇게 마음에 드는 테플릿을 얻어왔으면 이제 <strong>커스텀</strong>을 시작해야 한다. 깃허브 블로그는 웹브라우저에서 글을 쓰는 형태의 블로그가 아니기 떄문에 마크다운 같은 언어를 이용해서 코드로 게시글을 작성한다. 코드로 쓰고 커밋을해야 내 블로그에 업로드가 되는데, 결과물을 계속 그렇게 확인하면서 작성할 순 없다. 로컬서버를 연결해서 수정된 내용을 확인해야 한다. 그러기 위해서 Ruby를 설치해야한다. <mark>Ruby</mark>는 사용이 <strong>편리</strong>하고, 구문이 매우 <strong>명확</strong>하며, 프로그래밍의 즐거움을 중시하는 언어로 Ruby는 완벽하게 <strong>객체 지향 언어</strong>이다. 특히 <strong>반복</strong>, <strong>조건</strong> 등을 매우 직관적으로 처리되는게 장점이다. <br />
<mark>Gem</mark>은 Ruby 언어에서 사용하는 <strong>라이브러리나 응용 프로그램의 패키지</strong> 형태로 jekyll을 인스톨하거나 Bundler을 인스톨하는 역할을 한다. <mark>Bundler</mark>은 Ruby 언어를 위한 <strong>의존성 관리 도구</strong>이다. Bundler를 사용하면 프로젝트에 필요한 gem들의 정확한 버전을 지정하고, 모든 개발 및 배포 환경에서 동일한 gem들이 설치되도록 보장할 수 있습니다. 이것들이 다 설치되고 나면 드디어 이 명령어를 실행시킬때가 되었다.<br /></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>bundle <span class="nb">exec </span>jekyll serve
</code></pre></div></div>

<p>로컬주소가 나오면 성공 <br /></p>

<p>그 다음도 쉽진않다. 뭔가 굉장히 간결하면서 쉬워보이는 코드가 간단간단하게 써져있는 많은 파일들이 각 폴더에 들어있다. 파일에 구조는 다른 템플릿은 다를 수 도 있지만, 챗GPT가 어떤 내용의 파일이 어떤 폴더나 어떤 파일명의 파일에 있을 확률이 높다고 알려준게 대체로 맞는거 보면 어느 정도 틀이 있는 것 같다.<br /></p>

<h3><폴더></폴더></h3>
<p>_layouts    : 다양한 형태의 페이지만 제공하는 파일들이 모여져 있다.  <br />
<span class="indent-text">예) post페이지, 홈페이지, 기본 페이지</span> <br />
_includes   : 페이지를 구성하는 각 항목들이 조각으로 나눠져 모여져 있다.  <br />
<span class="indent-text">예) 헤더, 풋터, 사이드바</span> <br />
_data   : 상단바 구성 메뉴, 포스트 분류 메뉴 등 <br />
_posts : 실제로 포스팅할 게시글 파일이 모여져 있다. <br />
_sass : 스타일에 관련된 설정이 모여져있다. <br />
_asset : 정적 리소스들이 모여져 있다. 예) 이미지 파일 등 <br /></p>
<h3 id="-1"><파일></파일></h3>
<p>_config.yml : 각종 설정들을 작성하는 페이지<br />
about.md    : 블로그 메뉴중 About에 들어갈 내용이 작성되는 페이지<br />
index.html  : 블로그 첫 페이지(기본 페이지)<br /></p>

<p>.md 확장자는 <mark>Markdown</mark> 파일인데, 마크다운은 텍스트 기반의 경량 마크업 언어로 쉽고 빠르게 웹 컨텐츠의 포맷을 저장할수 있게 해준다. 마크다운의 목표는 최대한 읽기 쉽고, 쓰기 쉬운 평문 형식을 제공하는 것으로 문서 작성과 서식 지정에 초점이 맞춰져 있어 블로그 운영에 적합하다.<br />
.yml 확장자는 <mark>YAML</mark> (YAML Ain’t Markup Language) 파일이다. YAML은 데이터를 표현하기 위한 직관적인 형식을 제공하는 데이터 직렬화 언어로 주로 설정파일, 데이터 교환등에 쓰인다. 목적은 데이터를 사람이 읽고 쓰기 쉽게 만든 것 이라고 한다.<br /></p>

<p>여전히 모르는 것 투성이지만,🤣 천천히 하나씩 알아가는 재미와 뿌듯함이 있다.✌️ 오늘은 포스팅을 하나하고, 내가 원하는 레이아웃으로 커스텀하는 작업을 조금 진행해보려고 한다. 이게 진짜 내 블로그지,😎  오늘도 수고했어, 화이팅!!😍👍 <br /></p>]]></content><author><name>seuunng</name></author><category term="코딩" /><category term="깃허브블로그" /><summary type="html"><![CDATA[깃허브 블로그 만들면서 처음 본 단어 공부하기]]></summary></entry><entry><title type="html">대망의 깃허브 블로그 첫 포스트!</title><link href="http://localhost:4000/2024/04/28/myFirstPost/" rel="alternate" type="text/html" title="대망의 깃허브 블로그 첫 포스트!" /><published>2024-04-28T14:27:00+09:00</published><updated>2024-04-28T14:27:00+09:00</updated><id>http://localhost:4000/2024/04/28/myFirstPost</id><content type="html" xml:base="http://localhost:4000/2024/04/28/myFirstPost/"><![CDATA[<p>일단은 <strong>한글</strong>이 잘 써지는 테스트를 할 필요가 있다.</p>

<p class="message">사이드바에 사진을 변경하는데도 얼마나 오래걸렸는지
커스텀을 다양하게 할 수 있는데 깃허브블로그의 장점이라는데
내가 잘 해낼수 있을지 아직 모르겠다. 
이렇게 쓰면 노란색 박스안에 들어간다.</p>

<p>그래도 이 검은 화면에 무언가 이렇게 쓰고 있는걸
누군가 본다면 내가 엄청난 개발자라고 생각할지도..</p>

<p>나는 <a href="https://github.com/seuunng">깃허브</a>와  유튜브, 네이브블로그를 운영하고 있어서
사이드바에 각 아이콘과 링크를 넣어 두었다. 
이것도 상당히 오려걸렸지만 해내고 나니 뿌듯하다.
사실 네이블 블로그 아이콘을 넣고 싶었는데,
실패하고 블로그 아이콘으로 대체했다. 
네이버 주주로서 네이버가 흥해서 <a href="https://fontawesome.com/">폰트어썸</a> 같은 글로벌 아이콘 사이트에 아이 
네이버 아이콘도 나와서 한국사람들이 편하게 코딩할 수 있는 날이 오기를 기대해 본다.</p>

<p>지금은 연습중이니 포스트에 엉뚱한 소리가 있어도 이해해 주세요</p>

<blockquote>
  <p>이렇게 쓰면 옅은 회식으로 써지고 앞에 막대기가 생긴다. 인용구로 사용할 수 있을 것 같다.</p>
</blockquote>

<h2 id="소제목으로-사용할-수-있다">소제목으로 사용할 수 있다.</h2>

<ol>
  <li><strong>To bold text</strong>, use <code class="language-plaintext highlighter-rouge">&lt;굵은글씨&gt;</code>.</li>
  <li><em>To italicize text</em>, use <code class="language-plaintext highlighter-rouge">&lt;기울임&gt;</code>.</li>
  <li><mark>To highlight</mark>, use <code class="language-plaintext highlighter-rouge">&lt;강조, 형광펜&gt;</code>.
    <ul>
      <li>Abbreviations, like <abbr title="HyperText Markup Langage">HTML</abbr> should use <code class="language-plaintext highlighter-rouge">&lt;마우스 올리면 줄임말표시 혹은 부제목 있을때 활용가능&gt;</code>, 점선 밑줄 추가 회색글씨</li>
      <li>Citations, like <cite>— Mark Otto</cite>, should use <code class="language-plaintext highlighter-rouge">&lt;책제목&gt;</code>.</li>
      <li><del>Deleted</del> text should use <code class="language-plaintext highlighter-rouge">&lt;글자 가운데 줄&gt;</code> and <ins>inserted</ins> text should use <code class="language-plaintext highlighter-rouge">&lt;글자 밑줄&gt;</code>.</li>
    </ul>
  </li>
</ol>

<p>&lt;줄바꿈 안하면 위에랑 연결됨 더 들여쓰기가 된다던가
4번으로 표시된다던가 &gt;</p>
<ul>
  <li>은 점으로 보여짐 ㅋㅋ 들여쓰기
    <ol>
      <li>들여쓰기 연번</li>
    </ol>
  </li>
</ul>

<h3 id="코드입력시">코드입력시</h3>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="c1">// Example can be run directly in your JavaScript console</span>

<span class="c1">// Create a function that takes two arguments and returns the sum of those arguments</span>
<span class="kd">var</span> <span class="nx">adder</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Function</span><span class="p">(</span><span class="dl">"</span><span class="s2">a</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">b</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">return a + b</span><span class="dl">"</span><span class="p">);</span></code></pre></figure>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="code"><pre><span class="c1">// 코드입력 줄넘버와 함께</span>

<span class="c1">// Create a function that takes two arguments and returns the sum of those arguments</span>
<span class="kd">var</span> <span class="nx">adder</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Function</span><span class="p">(</span><span class="dl">"</span><span class="s2">a</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">b</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">return a + b</span><span class="dl">"</span><span class="p">);</span>
</pre></td></tr></tbody></table></code></pre></figure>

<h3 id="lists">Lists</h3>
<dl>
  <dt>소제목HyperText Markup Language (HTML)</dt>
  <dd>들여쓰기 내용The language used to describe and define the content of </dd>

  <dt>소제목 Cascading Style Sheets (CSS)</dt>
  <dd>들여쓰기 내용 Used to describe the appearance of Web content</dd>

</dl>

<h3 id="크기별로-사진-넣기">크기별로 사진 넣기</h3>

<p><img src="http://placehold.it/800x400" alt="placeholder" title="Large example image" />
<img src="http://placehold.it/400x200" alt="placeholder" title="Medium example image" />
<img src="http://placehold.it/200x200" alt="placeholder" title="Small example image" /></p>

<p>Align to the center by adding <code class="language-plaintext highlighter-rouge">class="align-center"</code>:</p>

<p><img src="http://placehold.it/400x200" alt="placeholder" title="Medium example image" class="align-center" /></p>

<h3 id="tables">Tables</h3>

<p>Aenean lacinia bibendum nulla sed consectetur. Lorem ipsum dolor sit amet, consectetur adipiscing elit.</p>

<table>
  <thead>
    <tr>
      <th>Name</th>
      <th>Upvotes</th>
      <th>Downvotes</th>
    </tr>
  </thead>
  <tfoot>
    <tr>
      <td>Totals</td>
      <td>21</td>
      <td>23</td>
    </tr>
  </tfoot>
  <tbody>
    <tr>
      <td>Alice</td>
      <td>10</td>
      <td>11</td>
    </tr>
  </tbody>
</table>

<p>Nullam id dolor id nibh ultricies vehicula ut id elit. Sed posuere consectetur est at lobortis. Nullam quis risus eget urna mollis ornare vel eu leo.</p>

<hr />
<hr />
<p>위에꺼도 수평선이네 신기</p>

<p>Want to see something else added? <a href="https://github.com/vszhub/not-pure-poole/issues/new">Open an issue.</a></p>]]></content><author><name>seuunng</name></author><summary type="html"><![CDATA[일단은 한글이 잘 써지는 테스트를 할 필요가 있다.]]></summary></entry></feed>